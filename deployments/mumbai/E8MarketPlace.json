{
  "address": "0xC28c25135332b63e7dbF5d882d1219368d603E98",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IE8MintableNft",
          "name": "_nftE8",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_energyToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "BuyBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "CreateBatchLot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "CreateLot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "EditBatchLot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "EditLot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GradTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_batchLotId",
          "type": "uint256"
        }
      ],
      "name": "SetActiveForBatchLot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "SetActiveForLot",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "buyBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "createBatchLot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "createLot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "editBatchLot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "editLot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getAllBatchLots",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct E8MarketPlace.BatchLot[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getAllLots",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct E8MarketPlace.Lot[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "getBatchLotInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct E8MarketPlace.BatchLot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLotInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct E8MarketPlace.Lot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gradTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_batchLotId",
          "type": "uint256"
        }
      ],
      "name": "setActiveForBatchLot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "setActiveForLot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x791dd5a0b4f51fbced7ae5c948501313c2ea7e2a00a84c6dde7c4124ac0c239e",
  "receipt": {
    "to": null,
    "from": "0xB984f9F42d405A37F7f3903C73cbF7112DCc859b",
    "contractAddress": "0xC28c25135332b63e7dbF5d882d1219368d603E98",
    "transactionIndex": 22,
    "gasUsed": "1838220",
    "logsBloom": "0x
    "blockHash": "0x4215acc4ff11dc530d3ecffac4cd99b0ef6c642d9da5acb3819993012ec83652",
    "transactionHash": "0x791dd5a0b4f51fbced7ae5c948501313c2ea7e2a00a84c6dde7c4124ac0c239e",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 26119056,
        "transactionHash": "0x791dd5a0b4f51fbced7ae5c948501313c2ea7e2a00a84c6dde7c4124ac0c239e",
        "address": "0xC28c25135332b63e7dbF5d882d1219368d603E98",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b984f9f42d405a37f7f3903c73cbf7112dcc859b"
        ],
        "data": "0x",
        "logIndex": 154,
        "blockHash": "0x4215acc4ff11dc530d3ecffac4cd99b0ef6c642d9da5acb3819993012ec83652"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 26119056,
        "transactionHash": "0x791dd5a0b4f51fbced7ae5c948501313c2ea7e2a00a84c6dde7c4124ac0c239e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b984f9f42d405a37f7f3903c73cbf7112dcc859b",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013978dd6af8da40000000000000000000000000000000000000000000000000cf32a8bccce390e0000000000000000000000000000000000000000000013bc34458e5859c836220000000000000000000000000000000000000000000000000cdf92fdf61eab6a0000000000000000000000000000000000000000000013bc345925e63077c3c6",
        "logIndex": 155,
        "blockHash": "0x4215acc4ff11dc530d3ecffac4cd99b0ef6c642d9da5acb3819993012ec83652"
      }
    ],
    "blockNumber": 26119056,
    "cumulativeGasUsed": "6554918",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Cc880bb3B6005a231bb9a24AbF2Fdb141B50cf3",
    "0x6755b91B914dBA473252A25C9cf35cf5135146Bf"
  ],
  "solcInputHash": "1758b7fedd46d6d5f39a97c560ebcf06",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IE8MintableNft\",\"name\":\"_nftE8\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_energyToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"BuyBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"CreateBatchLot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"CreateLot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"EditBatchLot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"EditLot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GradTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_batchLotId\",\"type\":\"uint256\"}],\"name\":\"SetActiveForBatchLot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"SetActiveForLot\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"buyBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"createBatchLot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"createLot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"editBatchLot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"editLot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getAllBatchLots\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct E8MarketPlace.BatchLot[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getAllLots\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct E8MarketPlace.Lot[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"getBatchLotInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct E8MarketPlace.BatchLot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLotInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct E8MarketPlace.Lot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gradTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_batchLotId\",\"type\":\"uint256\"}],\"name\":\"setActiveForBatchLot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setActiveForLot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/E8MarketPlace.sol\":\"E8MarketPlace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/E8MarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport './interfaces/IE8MintableNft.sol';\\n\\ncontract E8MarketPlace is Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private batchIdCounter;\\n    IE8MintableNft private nftE8;\\n    IERC20 private energyToken;\\n    mapping(uint256 => Lot) private tokenIdToLot;\\n    mapping(uint256 => BatchLot) private batchIdToBatchLot;\\n\\n    struct Lot {\\n        uint256 limit;\\n        uint256 supply;\\n        uint256 price;\\n        bool active;\\n    }\\n\\n    struct BatchLot {\\n        uint256 limit;\\n        uint256 supply;\\n        uint256 price;\\n        bool active;\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    function getLotInfo(uint256 tokenId) external view returns (Lot memory) {\\n        return tokenIdToLot[tokenId];\\n    }\\n\\n    function getBatchLotInfo(uint256 batchId) external view returns (BatchLot memory) {\\n        return batchIdToBatchLot[batchId];\\n    }\\n\\n    function getAllLots(uint256 start, uint256 size) external view returns (Lot[] memory) {\\n        Lot[] memory arrLots = new Lot[](size);\\n        for (uint256 i = start; i < start + size; i++) {\\n            Lot storage lot = tokenIdToLot[i];\\n            arrLots[i - start] = lot;\\n        }\\n        return arrLots;\\n    }\\n\\n    function getAllBatchLots(uint256 start, uint256 size) external view returns (BatchLot[] memory) {\\n        BatchLot[] memory arrBatchLots = new BatchLot[](size);\\n        for (uint256 i = start; i < start + size; i++) {\\n            BatchLot storage batchLot = batchIdToBatchLot[i];\\n            arrBatchLots[i - start] = batchLot;\\n        }\\n        return arrBatchLots;\\n    }\\n\\n    event Buy(uint256 tokenId, uint256 amount, address buyer);\\n    event BuyBatch(uint256 batchId, address buyer);\\n    event CreateLot(uint256 tokenId, uint256 limit, uint256 price, bool active);\\n    event CreateBatchLot(uint256 batchId, uint256 limit, uint256 price, bool active, uint256[] ids, uint256[] amounts);\\n    event EditLot(uint256 tokenId, uint256 limit, uint256 price, bool active);\\n    event EditBatchLot(uint256 batchId, uint256 limit, uint256 price, bool active, uint256[] ids, uint256[] amounts);\\n    event SetActiveForLot(bool _active, uint256 _tokenId);\\n    event SetActiveForBatchLot(bool _active, uint256 _batchLotId);\\n    event GradTokens(address owner, uint256 amount);\\n\\n    constructor(IE8MintableNft _nftE8, IERC20 _energyToken) {\\n        nftE8 = _nftE8;\\n        energyToken = _energyToken;\\n    }\\n\\n    function buy(uint256 _tokenId, uint256 _amount) external returns (bool) {\\n        Lot storage lot = tokenIdToLot[_tokenId];\\n        require(lot.active, 'MarketPlaceE8: lot is not active');\\n        if (lot.limit != 0) require(lot.supply + _amount <= lot.limit, 'MarketPlaceE8: amount more planned supply');\\n        lot.supply = lot.supply + _amount;\\n        energyToken.transferFrom(msg.sender, address(this), lot.price);\\n        nftE8.mintExists(msg.sender, _tokenId, _amount, 'data');\\n        emit Buy(_tokenId, _amount, msg.sender);\\n        return true;\\n    }\\n\\n    function buyBatch(uint256 batchId) external returns (bool) {\\n        BatchLot storage batchLot = batchIdToBatchLot[batchId];\\n        require(batchLot.active, 'MarketPlaceE8: lot is not active');\\n        if (batchLot.limit != 0) require(batchLot.supply < batchLot.limit, 'MarketPlaceE8: amount more planned supply');\\n        batchLot.supply = batchLot.supply + 1;\\n        energyToken.transferFrom(msg.sender, address(this), batchLot.price);\\n        nftE8.mintExistsBatch(msg.sender, batchLot.ids, batchLot.amounts, 'data');\\n        emit BuyBatch(batchId, msg.sender);\\n        return true;\\n    }\\n\\n    function createLot(\\n        uint256 tokenId,\\n        uint256 limit,\\n        uint256 price,\\n        bool active\\n    ) external onlyOwner returns (bool) {\\n        require(nftE8.isExists(tokenId), 'E8MarketPlace: token dont exist');\\n        require(!tokenIdToLot[tokenId].active, 'E8MarketPlace: lot must be not active');\\n        tokenIdToLot[tokenId] = Lot(limit, 0, price, active);\\n        emit CreateLot(tokenId, limit, price, active);\\n        return true;\\n    }\\n\\n    function createBatchLot(\\n        uint256 limit,\\n        uint256 price,\\n        bool active,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyOwner returns (bool) {\\n        require(ids.length == amounts.length, 'E8MarketPlace: ids and amounts length mismatch');\\n        uint256 batchId = batchIdCounter.current();\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(nftE8.isExists(ids[i]), 'E8MintableNft: one of tokens is not exist');\\n        }\\n        batchIdToBatchLot[batchId] = BatchLot(limit, 0, price, active, ids, amounts);\\n        emit CreateBatchLot(batchId, limit, price, active, ids, amounts);\\n        batchIdCounter.increment();\\n        return true;\\n    }\\n\\n    function editLot(\\n        uint256 tokenId,\\n        uint256 limit,\\n        uint256 price,\\n        bool active\\n    ) external onlyOwner returns (bool) {\\n        Lot memory lot = tokenIdToLot[tokenId];\\n        require(!lot.active, 'E8MarketPlace: lot must be not active');\\n        tokenIdToLot[tokenId] = Lot(limit, lot.supply, price, active);\\n        emit EditLot(tokenId, limit, price, active);\\n        return true;\\n    }\\n\\n    function editBatchLot(\\n        uint256 batchId,\\n        uint256 limit,\\n        uint256 price,\\n        bool active,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyOwner returns (bool) {\\n        BatchLot memory batchLot = batchIdToBatchLot[batchId];\\n        require(!batchLot.active, 'E8MarketPlace: batchLot must be not active');\\n        batchIdToBatchLot[batchId] = BatchLot(limit, batchLot.supply, price, active, ids, amounts);\\n        emit EditBatchLot(batchId, limit, price, active, ids, amounts);\\n        return true;\\n    }\\n\\n    function setActiveForLot(bool _active, uint256 _tokenId) external onlyOwner returns (bool) {\\n        tokenIdToLot[_tokenId].active = _active;\\n        emit SetActiveForLot(_active, _tokenId);\\n        return true;\\n    }\\n\\n    function setActiveForBatchLot(bool _active, uint256 _batchLotId) external onlyOwner returns (bool) {\\n        batchIdToBatchLot[_batchLotId].active = _active;\\n        emit SetActiveForBatchLot(_active, _batchLotId);\\n        return true;\\n    }\\n\\n    function gradTokens() external onlyOwner returns (bool) {\\n        energyToken.transfer(owner(), energyToken.balanceOf(address(this)));\\n        emit GradTokens(owner(), energyToken.balanceOf(address(this)));\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x40a2a89ccde18fe236a81d7e4c191f41edbe9a1124f1c4bfbb9d0b346a4da27d\",\"license\":\"MIT\"},\"contracts/interfaces/IE8MintableNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IE8MintableNft is IERC1155 {\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        string memory uri,\\n        bytes memory data\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        string[] memory uris,\\n        bytes memory data\\n    ) external;\\n\\n    function mintExists(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function mintExistsBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function isExists(uint256 tokenId) external view returns (bool);\\n\\n    function getCurrentId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa9b0b97a1b3fc183539fa7aaa77756aebe7a29541388068b184efe1545b1c97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063cf9bde4a11610066578063cf9bde4a14610219578063d6febde81461022c578063f2fde38b1461023f578063f84338d41461025257600080fd5b8063715018a6146101c1578063746d1e57146101cb57806383f4fb81146101de5780638da5cb5b146101fe57600080fd5b806342af7950116100d357806342af79501461016857806343ec26231461017b57806351f5beb61461019b578063596faf81146101ae57600080fd5b8063048a9b1e146101055780632f1b13031461012d578063379744bb1461014d5780633efb77b914610155575b600080fd5b610118610113366004611958565b610272565b60405190151581526020015b60405180910390f35b61014061013b366004611907565b61053f565b6040516101249190611dc3565b6101186105b6565b6101186101633660046119df565b6107d4565b6101186101763660046118dc565b6109a4565b61018e610189366004611937565b610a34565b6040516101249190611c1b565b6101186101a93660046119df565b610c24565b6101186101bc3660046118dc565b610d61565b6101c9610de3565b005b6101186101d9366004611907565b610e19565b6101f16101ec366004611937565b610fec565b6040516101249190611c7c565b6000546040516001600160a01b039091168152602001610124565b610118610227366004611a1f565b611118565b61011861023a366004611937565b611389565b6101c961024d366004611892565b611578565b610265610260366004611907565b611613565b6040516101249190611db0565b600080546001600160a01b031633146102a65760405162461bcd60e51b815260040161029d90611ced565b60405180910390fd5b815183511461030e5760405162461bcd60e51b815260206004820152602e60248201527f45384d61726b6574506c6163653a2069647320616e6420616d6f756e7473206c60448201526d0cadccee8d040dad2e6dac2e8c6d60931b606482015260840161029d565b600061031960015490565b905060005b84518110156104445760025485516001600160a01b0390911690639d36788e9087908490811061035e57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161038491815260200190565b60206040518083038186803b15801561039c57600080fd5b505afa1580156103b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d491906118c0565b6104325760405162461bcd60e51b815260206004820152602960248201527f45384d696e7461626c654e66743a206f6e65206f6620746f6b656e73206973206044820152681b9bdd08195e1a5cdd60ba1b606482015260840161029d565b8061043c81611e6b565b91505061031e565b506040805160c081018252888152600060208083018281528385018b81528a151560608601908152608086018b815260a087018b905288865260058552969094208551815591516001830155516002820155915160038301805460ff191691151591909117905592518051929391926104c39260048501920190611794565b5060a082015180516104df916005840191602090910190611794565b509050507f29f9a1aabef06f688917ab476e2a26e508b8ca280cedb77b4bdfb05206e3517381888888888860405161051c96959493929190611df0565b60405180910390a1610532600180546001019055565b5060019695505050505050565b61056c60405180608001604052806000815260200160008152602001600081526020016000151581525090565b5060009081526004602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161515606082015290565b600080546001600160a01b031633146105e15760405162461bcd60e51b815260040161029d90611ced565b6003546001600160a01b031663a9059cbb6106046000546001600160a01b031690565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561064757600080fd5b505afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f919061191f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156106c557600080fd5b505af11580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd91906118c0565b507f6acef199a20ebc0081fa72c1f43323b7c1d42fb1b7084cf468bc8752094ee1e56107316000546001600160a01b031690565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561077457600080fd5b505afa158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac919061191f565b604080516001600160a01b03909316835260208301919091520160405180910390a150600190565b600080546001600160a01b031633146107ff5760405162461bcd60e51b815260040161029d90611ced565b600254604051634e9b3c4760e11b8152600481018790526001600160a01b0390911690639d36788e9060240160206040518083038186803b15801561084357600080fd5b505afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b91906118c0565b6108c75760405162461bcd60e51b815260206004820152601f60248201527f45384d61726b6574506c6163653a20746f6b656e20646f6e7420657869737400604482015260640161029d565b60008581526004602052604090206003015460ff16156108f95760405162461bcd60e51b815260040161029d90611d6b565b60408051608080820183528682526000602080840182815284860189815288151560608088018281528e8752600486529589902097518855925160018801559051600287015592516003909501805460ff19169515159590951790945584518a8152908101899052938401879052918301919091527f93cad02e45bd64eeee79d05dfe25887ec9e6c57208128718ddc08a90a1bc5c98910160405180910390a1506001949350505050565b600080546001600160a01b031633146109cf5760405162461bcd60e51b815260040161029d90611ced565b600082815260056020908152604091829020600301805460ff191686151590811790915582519081529081018490527ffa60580bf54d40621b4439d736f4a10676f23ac2126d3458d671ef933696cbb991015b60405180910390a15060015b92915050565b606060008267ffffffffffffffff811115610a5f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610acb57816020015b610ab86040518060c0016040528060008152602001600081526020016000815260200160001515815260200160608152602001606081525090565b815260200190600190039081610a7d5790505b509050835b610ada8486611e3c565b811015610c1c57600081815260056020908152604091829020825160c08101845281548152600182015481840152600282015481850152600382015460ff161515606082015260048201805485518186028101860190965280865292949193859360808601939291830182828015610b7157602002820191906000526020600020905b815481526020019060010190808311610b5d575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610bc957602002820191906000526020600020905b815481526020019060010190808311610bb5575b505050505081525050838784610bdf9190611e54565b81518110610bfd57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250508080610c1490611e6b565b915050610ad0565b509392505050565b600080546001600160a01b03163314610c4f5760405162461bcd60e51b815260040161029d90611ced565b60008581526004602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161580156060830152610cb25760405162461bcd60e51b815260040161029d90611d6b565b6040805160808082018352878252602084810151818401908152838501898152881515606080870182815260008f81526004875289902097518855935160018801559151600287015591516003909501805460ff19169515159590951790945584518b81529182018a9052938101889052918201929092527f0ce3255d9b24aa8b8a635eed71f2722443e8f477bfb1ca47326a38224332276a910160405180910390a150600195945050505050565b600080546001600160a01b03163314610d8c5760405162461bcd60e51b815260040161029d90611ced565b600082815260046020908152604091829020600301805460ff191686151590811790915582519081529081018490527fff9c96733453b346316733938258ef2eb286c4b4ee58e7f6137d5a73aa4f18839101610a22565b6000546001600160a01b03163314610e0d5760405162461bcd60e51b815260040161029d90611ced565b610e176000611744565b565b6000818152600560205260408120600381015460ff16610e7b5760405162461bcd60e51b815260206004820181905260248201527f4d61726b6574506c61636545383a206c6f74206973206e6f7420616374697665604482015260640161029d565b805415610ea6578054600182015410610ea65760405162461bcd60e51b815260040161029d90611d22565b600180820154610eb591611e3c565b600182015560035460028201546040516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610f1257600080fd5b505af1158015610f26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4a91906118c0565b5060025460405163445e3fad60e01b81526001600160a01b039091169063445e3fad90610f84903390600480870191600588019101611b7b565b600060405180830381600087803b158015610f9e57600080fd5b505af1158015610fb2573d6000803e3d6000fd5b5050604080518681523360208201527faf57e6192ecdceb015b45d9703d0b258d4e1eb3c3a395822d995115346ab27269350019050610a22565b606060008267ffffffffffffffff81111561101757634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561107557816020015b61106260405180608001604052806000815260200160008152602001600081526020016000151581525090565b8152602001906001900390816110355790505b509050835b6110848486611e3c565b811015610c1c57600081815260046020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600382015460ff1615156060820152836110db8885611e54565b815181106110f957634e487b7160e01b600052603260045260246000fd5b602002602001018190525050808061111090611e6b565b91505061107a565b600080546001600160a01b031633146111435760405162461bcd60e51b815260040161029d90611ced565b6000878152600560209081526040808320815160c08101835281548152600182015481850152600282015481840152600382015460ff16151560608201526004820180548451818702810187019095528085529194929360808601939092908301828280156111d157602002820191906000526020600020905b8154815260200190600101908083116111bd575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561122957602002820191906000526020600020905b815481526020019060010190808311611215575b50505050508152505090508060600151156112995760405162461bcd60e51b815260206004820152602a60248201527f45384d61726b6574506c6163653a2062617463684c6f74206d757374206265206044820152696e6f742061637469766560b01b606482015260840161029d565b6040805160c0810182528881526020838101518183019081528284018a815289151560608501908152608085018a815260a086018a905260008f815260058652969096208551815592516001840155905160028301555160038201805460ff19169115159190911790559251805192939261131a9260048501920190611794565b5060a08201518051611336916005840191602090910190611794565b509050507f1cd97faaf54bef4b1d99c54fa300e01fb4095820defee8d1c38a6eb6842e12da88888888888860405161137396959493929190611df0565b60405180910390a1506001979650505050505050565b6000828152600460205260408120600381015460ff166113eb5760405162461bcd60e51b815260206004820181905260248201527f4d61726b6574506c61636545383a206c6f74206973206e6f7420616374697665604482015260640161029d565b8054156114225780546001820154611404908590611e3c565b11156114225760405162461bcd60e51b815260040161029d90611d22565b8281600101546114329190611e3c565b600182015560035460028201546040516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561148f57600080fd5b505af11580156114a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c791906118c0565b50600254604051630193d91160e41b81526001600160a01b039091169063193d9110906114fc90339088908890600401611bda565b600060405180830381600087803b15801561151657600080fd5b505af115801561152a573d6000803e3d6000fd5b50506040805187815260208101879052338183015290517ff7735c8cb2a65788ca663fc8415b7c6a66cd6847d58346d8334e8d52a599d3df9350908190036060019150a15060019392505050565b6000546001600160a01b031633146115a25760405162461bcd60e51b815260040161029d90611ced565b6001600160a01b0381166116075760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161029d565b61161081611744565b50565b61164e6040518060c0016040528060008152602001600081526020016000815260200160001515815260200160608152602001606081525090565b600082815260056020908152604091829020825160c08101845281548152600182015481840152600282015481850152600382015460ff161515606082015260048201805485518186028101860190965280865291949293608086019392908301828280156116dc57602002820191906000526020600020905b8154815260200190600101908083116116c8575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561173457602002820191906000526020600020905b815481526020019060010190808311611720575b5050505050815250509050919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156117cf579160200282015b828111156117cf5782518255916020019190600101906117b4565b506117db9291506117df565b5090565b5b808211156117db57600081556001016117e0565b600082601f830112611804578081fd5b8135602067ffffffffffffffff8083111561182157611821611e9c565b8260051b604051601f19603f8301168101818110848211171561184657611846611e9c565b60405284815283810192508684018288018501891015611864578687fd5b8692505b85831015611886578035845292840192600192909201918401611868565b50979650505050505050565b6000602082840312156118a3578081fd5b81356001600160a01b03811681146118b9578182fd5b9392505050565b6000602082840312156118d1578081fd5b81516118b981611eb2565b600080604083850312156118ee578081fd5b82356118f981611eb2565b946020939093013593505050565b600060208284031215611918578081fd5b5035919050565b600060208284031215611930578081fd5b5051919050565b60008060408385031215611949578182fd5b50508035926020909101359150565b600080600080600060a0868803121561196f578081fd5b8535945060208601359350604086013561198881611eb2565b9250606086013567ffffffffffffffff808211156119a4578283fd5b6119b089838a016117f4565b935060808801359150808211156119c5578283fd5b506119d2888289016117f4565b9150509295509295909350565b600080600080608085870312156119f4578384fd5b8435935060208501359250604085013591506060850135611a1481611eb2565b939692955090935050565b60008060008060008060c08789031215611a37578081fd5b8635955060208701359450604087013593506060870135611a5781611eb2565b9250608087013567ffffffffffffffff80821115611a73578283fd5b611a7f8a838b016117f4565b935060a0890135915080821115611a94578283fd5b50611aa189828a016117f4565b9150509295509295509295565b6000815180845260208085019450808401835b83811015611add57815187529582019590820190600101611ac1565b509495945050505050565b6000815480845260208085019450838352808320835b83811015611add57815487529582019560019182019101611afe565b8051825260208101516020830152604081015160408301526060810151151560608301526000608082015160c06080850152611b5960c0850182611aae565b905060a083015184820360a0860152611b728282611aae565b95945050505050565b6001600160a01b0384168152608060208201819052600090611b9f90830185611ae8565b8281036040840152611bb18185611ae8565b838103606085015260048152636461746160e01b60208201529050604081019695505050505050565b6001600160a01b03841681526020810183905260408101829052608060608201819052600490820152636461746160e01b60a0820152600060c08201611b72565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b82811015611c6f57603f19888603018452611c5d858351611b1a565b94509285019290850190600101611c41565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611ce157611cce8385518051825260208101516020830152604081015160408301526060810151151560608301525050565b9284019260809290920191600101611c98565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4d61726b6574506c61636545383a20616d6f756e74206d6f726520706c616e6e604082015268656420737570706c7960b81b606082015260800190565b60208082526025908201527f45384d61726b6574506c6163653a206c6f74206d757374206265206e6f742061604082015264637469766560d81b606082015260800190565b6020815260006118b96020830184611b1a565b81518152602080830151908201526040808301519082015260608083015115159082015260808101610a2e565b868152856020820152846040820152831515606082015260c060808201526000611e1d60c0830185611aae565b82810360a0840152611e2f8185611aae565b9998505050505050505050565b60008219821115611e4f57611e4f611e86565b500190565b600082821015611e6657611e66611e86565b500390565b6000600019821415611e7f57611e7f611e86565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461161057600080fdfea2646970667358221220403d5f859a922e3fa05c265a1f4660199c4d9e03a36bceb8601c500df111e69e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2777,
        "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
        "label": "batchIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)2455_storage"
      },
      {
        "astId": 2780,
        "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
        "label": "nftE8",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IE8MintableNft)4178"
      },
      {
        "astId": 2783,
        "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
        "label": "energyToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)2132"
      },
      {
        "astId": 2788,
        "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
        "label": "tokenIdToLot",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Lot)2802_storage)"
      },
      {
        "astId": 2793,
        "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
        "label": "batchIdToBatchLot",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(BatchLot)2817_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IE8MintableNft)4178": {
        "encoding": "inplace",
        "label": "contract IE8MintableNft",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2132": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(BatchLot)2817_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct E8MarketPlace.BatchLot)",
        "numberOfBytes": "32",
        "value": "t_struct(BatchLot)2817_storage"
      },
      "t_mapping(t_uint256,t_struct(Lot)2802_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct E8MarketPlace.Lot)",
        "numberOfBytes": "32",
        "value": "t_struct(Lot)2802_storage"
      },
      "t_struct(BatchLot)2817_storage": {
        "encoding": "inplace",
        "label": "struct E8MarketPlace.BatchLot",
        "members": [
          {
            "astId": 2804,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "limit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2806,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "supply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2808,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2810,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 2813,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "ids",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2816,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "amounts",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Counter)2455_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2454,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Lot)2802_storage": {
        "encoding": "inplace",
        "label": "struct E8MarketPlace.Lot",
        "members": [
          {
            "astId": 2795,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "limit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2797,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "supply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2799,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2801,
            "contract": "contracts/E8MarketPlace.sol:E8MarketPlace",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}